import { Injectable } from '@nestjs/common';

type User = {
  id: string; //* UUID
  email: string;
  name: string;
  password: string;
  address: string;
  phone: string;
  country?: string | undefined;
  city?: string | undefined;
};

const users: User[] = [
  {
    id: '1a8d92bc-3b6e-4b85-b2a1-4a2c72a0e9b1',
    email: 'freddie@example.com',
    name: 'Freddie Mercury',
    password: 'BohemianRhapsody123',
    address: '123 Queen St.',
    phone: '+44 20 7946 0958',
    country: 'UK',
    city: 'London',
  },
  {
    id: '25f18e5c-24db-4f71-95f3-71c35e9672b2',
    email: 'adele@example.com',
    name: 'Adele Adkins',
    password: 'HelloFromTheOtherSide456',
    address: '456 Soul Ave.',
    phone: '+44 20 7856 4321',
    country: 'UK',
    city: 'Tottenham',
  },
  {
    id: '39eaf9b0-990f-4b28-9b68-3e593f338c07',
    email: 'cerati@example.com',
    name: 'Gustavo Cerati',
    password: 'SodaStereo789',
    address: '789 Rock Nacional',
    phone: '+54 11 1234 5678',
    country: 'Argentina',
    city: 'Buenos Aires',
  },
  {
    id: '4b7d1f44-1c64-4e1e-8b8f-98455b44a1a2',
    email: 'beyonce@example.com',
    name: 'Beyoncé Knowles',
    password: 'QueenBey@2023',
    address: '101 Destiny Ln.',
    phone: '+1 713-555-0123',
    country: 'USA',
    city: 'Houston',
  },
  {
    id: '5f19dc77-5eec-4b47-a24c-0d48df77aaf5',
    email: 'chris@example.com',
    name: 'Chris Martin',
    password: 'ColdplayYellow123',
    address: '202 Viva Rd.',
    phone: '+44 161 123 4567',
    country: 'UK',
    city: 'Exeter',
  },
];

@Injectable()
export class UsersRepository {
  getUsers(page: number, limit: number) {
    const start = (page - 1) * limit;
    const end = start + limit;
    const usersList = users.slice(start, end);
    return usersList.map(({ password: _, ...userNoPassword }) => userNoPassword);
  }
  getUserById(id: string) {
    const foundIndex = users.findIndex((u) => u.id === id);
    if (foundIndex === -1) return `No se encontró el usuario con ese id:${id}`;
    const { password: _, ...userNoPassword } = users[foundIndex];
    return userNoPassword;
  }

  addUser(user: any) {
    // Validar estructura básica
    if (!user.email || !user.name || !user.password || !user.address || !user.phone) {
      return 'Estructura del usuario inválida';
    }

    users.push({ ...user, id: user.email });
    const { password: _, ...userNoPassword } = user;
    return userNoPassword;
  }

  updateUser(id: string, user: any) {
    const foundIndex = users.findIndex((u) => u.id === id);
    if (foundIndex === -1) return `No se encontró el usuario con ese id: ${id}`;
    // Validar estructura básica
    if (!user.email || !user.name || !user.password || !user.address || !user.phone) {
      return 'Estructura del usuario inválida';
    }
    
    users[foundIndex] = { ...users[foundIndex], ...user };
    return users[foundIndex].id;
  }

  deleteUser(id: string) {
    const foundIndex = users.findIndex((u) => u.id === id);
    if (foundIndex === -1) return `No se encontró el usuario con ese id: ${id}`;
    users.splice(foundIndex, 1);
    return id;
  }

  getUserByEmail(email: string) {
    return users.find((u) => u.email === email);
  }
}
